{
  "title": "04. 属性与方法封装",
  "cells": [
    {
      "type": "text",
      "data": "由于 JavaScript 的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的，通过此特性即可创建类的私有变量以及私有方法。"
    },
    {
      "type": "text",
      "data": "然而在函数内部通过 this 创建的属性和方法，在类创建对象时，每个对象自身都拥有一份，并且可以在外部访问到。"
    },
    {
      "type": "text",
      "data": "因此通过 this 创建的属性可看作是对象共有的属性和对象共有的方法，而通过 this 创建的方法，不但可以访问这些对象的共有属性与共有方法，而且还能访问到类（创建时）或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。"
    },
    {
      "type": "text",
      "data": "在对象创建时通过使用这些特权方法，我们可以初始化实例对象的一些属性，因此这些在创建对象时调用的特权方法还可以看作是类的构造器。如下面的例子："
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 私有属性与私有方法，特权方法，对象公有属性和对象公有方法，构造器\nvar Book = function (id, name, price) {\n  // 私有属性\n  var num = 1;\n  // 私有方法\n  function checkId() {};\n  // 特权方法\n  this.getName = function () {};\n  this.getPrice = function () {};\n  this.setName = function () {};\n  this.setPrice = function () {};\n  // 对象公有属性\n  this.id = id;\n  // 对象公有方法\n  this.copy = function () {};\n  // 构造器\n  this.setName(name);\n  this.setPrice(price);\n};"
    },
    {
      "type": "text",
      "data": "通过 new 关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到，所以新创建的对象中无法获取他们，但是可以通过类来使用。因此在类外面通过点语法定义的属性以及方法被称为类的静态公有属性和类的静态公有方法。而类通过 prototype 创建的属性或者方法在类的实例的对象中是可以通过 this 访问到的（如 03 图中新创建的对象的 __proto__ 指向了类的原型所指向的对象），所以将 prototype 对象中的属性和方法称为公有属性和公有方法，如："
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 类静态公有属性（对象不能访问）\nBook.isChinese = true;\n\n// 类静态公有方法（对象不能访问）\nBook.resetTime = function () {\n  console.log('new Time');\n};\n\nBook.prototype = {\n  // 公有属性\n  isJSBook: false,\n  // 公有方法\n  display: function () {}\n};"
    },
    {
      "type": "text",
      "data": "通过 new 关键字创建的对象实质是对新对象 this 的不断赋值，并将 prototype 指向类的 prototype 所指向的对象，而类的构造函数外面通过点语法定义的属性方法是不会添加到新创建的对象上去的。"
    },
    {
      "type": "text",
      "data": "因此要想在新创建的对象中使用 isChinese 就得通过 Book 类使用而不能通过 this，如 Book.isChinese，而类的原型 prototype 上定义的属性在新对象里就可以直接使用，这是因为新对象的 prototype 和类的 prototype 指向的是同一个对象。"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var b = new Book(11, 'JavaScript 设计模式', 50);\nconsole.log(b.num);           // undefined\nconsole.log(b.isJSBook);      // false\nconsole.log(b.id);            // 11\nconsole.log(b.isChinese);     // undefined"
    },
    {
      "type": "text",
      "data": "类的私有属性 num 以及静态公有属性 isChinese 在新创建的 b 对象里是访问不到的。而类的公有属性 isJSBook 在 b 对象中却是可以通过点语法访问到的。"
    },
    {
      "type": "text",
      "data": "类的静态公有属性 isChinese 可以通过类的自身访问。"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "console.log(Book.isChinese);     // true\nBook.resetTime();                // new Time"
    }
  ]
}