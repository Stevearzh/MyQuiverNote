{
  "title": "07. 继承",
  "cells": [
    {
      "type": "markdown",
      "data": "# 0. 每个类都有 3 个部分：\n\n1. 第一部分是构造函数内的，这是供实例化对象复制用的；\n\n2. 第二部分是构造函数外的，直接通过点语法添加的，这是供类使用的，实例化对象是访问不到的；\n\n3. 第三部分是类的原型中的，实例化对象可以通过其原型链间接地访问到，也是为供所有实例化对象所共用的。"
    },
    {
      "type": "markdown",
      "data": "# 1. 类式继承"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 声明父类\nfunction SuperClass() {\n  this.superValue = true;\n};\n\n// 为父类添加公有方法\nSuperClass.prototype.getSuperValue = function () {\n  return this.superValue;\n};\n\n// 声明子类\nfunction SubClass() {\n  this.subValue = false;\n};\n\n// 继承父类\nSubClass.prototype = new SuperClass();\n\n// 为子类添加公有方法\nSubClass.prototype.getSubValue = function () {\n  return this.subValue;\n};"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var instance = new SubClass();\nconsole.log(instance.getSuperValue());     // true\nconsole.log(instance.getSubValue());       // false"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "console.log(instance instanceof SuperClass);               // true\nconsole.log(instance instanceof SubClass);                 // true\nconsole.log(SubClass instanceof SuperClass);               // false\nconsole.log(SubClass.prototype instanceof SuperClass);     // true"
    },
    {
      "type": "markdown",
      "data": "## 类式继承的缺点\n\n1. 子类通过其原型 prototype 对父类实例化，继承了父类。当父类中的公有属性是引用类型时，就会在子类中被所有实例共用，此时，假如某个子类的实例修改了子类原型从父类构造函数中继承来的公有属性，就会同时影响到其他子类；（如下示例）\n\n2. 子类实现的继承是靠其原型 prototype 对父类的实例化实现的，在创建父类的时候，无法向父类传递参数，因此在实例化父类的时候也无法对父类构造函数内的属性进行初始化。"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "function SuperClass() {\n  this.books = ['JavaScript', 'html', 'css'];\n};\n\nfunction SubClass() {};\nSubClass.prototype = new SuperClass();\n\nvar instance1 = new SubClass();\nvar instance2 = new SubClass();\n\nconsole.log(instance2.books);     // [\"JavaScript\", \"html\", \"css\"]\ninstance1.books.push('设计模式');\nconsole.log(instance2.books);     // [\"JavaScript\", \"html\", \"css\", \"设计模式\"]"
    },
    {
      "type": "markdown",
      "data": "# 2. 构造函数继承"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 声明父类\nfunction SuperClass(id) {\n  // 引用类型公有属性\n  this.books = ['JavaScript', 'html', 'css'];\n  // 值类型公有属性\n  this.id = id;\n};\n\n// 父类声明原型方法\nSuperClass.prototype.showBooks = function () {\n  console.log(this.books);\n};\n\n// 声明子类\nfunction SubClass(id) {\n  // 继承父类\n  SuperClass.call(this, id);\n};"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 创建第一个子类的实例\nvar instance1 = new SubClass(10);\n// 创建第二个子类的实例\nvar instance2 = new SubClass(11);\n\ninstance1.books.push('设计模式');\nconsole.log(instance1.books);     // [\"JavaScript\", \"html\", \"css\", \"设计模式\"]\nconsole.log(instance1.id);        // 10\nconsole.log(instance2.books);     // [\"JavaScript\", \"html\", \"css\"]\nconsole.log(instance2.id);        // 11\n\ninstance1.showBooks();            // TypeError"
    },
    {
      "type": "markdown",
      "data": "## 概述\n\nSuperClass.call(this, id); 这条语句是构造函数式继承的精华。\n\n由于 call 这个方法可以更改函数的作用环境，因此在子类中，对 SuperClass 调用这个方法就是将子类中的变量在父类中执行一遍，由于父类中是给 this 绑定属性的，因此子类自然也就继承了父类的公有属性。\n\n由于这种类型的继承没有涉及原型 prototype，所以父类中的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中，这样创造出来的每个实例都会单独拥有一份而不能共用，这样就违背了代码复用的原则。"
    },
    {
      "type": "markdown",
      "data": "# 3. 组合继承\n\n类式继承是通过子类的原型 prototype 对父类实例化来实现的，构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的。组合继承在继承中同时做到了这两点："
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 声明父类\nfunction SuperClass(name) {\n  // 值类型公有属性\n  this.name = name;\n  // 引用类型公有属性\n  this.books = ['html', 'css', 'JavaScript'];\n};\n\n// 父类原型公有方法\nSuperClass.prototype.getName = function () {\n  console.log(this.name);\n};\n\n// 声明子类\nfunction SubClass(name, time) {\n  // 构造函数式继承父类 name 属性\n  SuperClass.call(this, name);\n  // 子类中新增公有属性\n  this.time = time;\n};\n\n// 类式继承 子类原型继承父类\nSubClass.prototype = new SuperClass();\n\n// 子类原型方法\nSubClass.prototype.getTime = function () {\n  console.log(this.time);\n};"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var instance1 = new SubClass('js book', 2014);\ninstance1.books.push('设计模式');\nconsole.log(instance1.books);     // ['html', 'css', 'JavaScript', '设计模式']\ninstance1.getName();              // js book\ninstance1.getTime();              // 2014\n\nvar instance2 = new SubClass('css book', 2013);\nconsole.log(instance2.books);     // [\"html\", \"css\", \"JavaScript\"]\ninstance2.getName();              // css book\ninstance2.getTime();              // 2013"
    },
    {
      "type": "markdown",
      "data": "## 缺点\n\n组合继承在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类构造函数。父类构造函数调用了两遍。"
    },
    {
      "type": "markdown",
      "data": "# 4. 原型式继承\n\n借助原型 prototype 可以根据已有的对象创建一个新的对象，同时不必创建新的自定义对象类型。"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "function inheritObject(o) {\n  // 声明一个过渡函数对象\n  function F() {};\n  // 过渡对象的原型继承父对象\n  F.prototype = o;\n  // 返回过渡对象的一个实例，该实例的原型继承了父对象\n  return new F();\n};"
    },
    {
      "type": "markdown",
      "data": "原型式继承是对类式继承的一个封装，其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现，目的是为了创建要返回的新的实例化对象。"
    },
    {
      "type": "markdown",
      "data": "# 5. 寄生式继承"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 声明基对象\nvar book = {\n  name:      'js book',\n  alikeBook: ['css book', 'html book']\n};\n\nfunction createBook(obj) {\n  // 通过原型式继承方法创建新对象\n  var o = new inheritObject(obj);\n  // 拓展新对象\n  o.getName = function () {\n    console.log(name);\n  };\n  // 返回拓展后的新对象\n  return o;\n}"
    },
    {
      "type": "markdown",
      "data": "寄生式继承是对原型式继承的二次封装，并且在这个过程中对继承的对象进行了拓展，这样新创建的对象不仅仅有父类中的属性和方法而且还添加了新的属性和方法。"
    },
    {
      "type": "markdown",
      "data": "# 6. 寄生组合式继承"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "/*\n * 寄生式继承 继承原型\n * 传递参数 subClass   子类\n * 传递参数 superClass 父类\n */\n function inheritPrototype(subClass, superClass) {\n   // 复制一份父类的原型副本保存在变量中\n   var p = inheritObject(superClass.prototype);\n   // 修正因为重写子类原型导致子类的 constructor 属性被修改\n   p.constructor = subClass;\n   // 设置子类的原型\n   subClass.prototype = p;\n };"
    },
    {
      "type": "markdown",
      "data": "组合式继承中，通过构造函数继承的属性和方法是没有问题的，所以这里主要探究通过寄生组合式继承重新继承父类的原型。\n\n需要继承的仅仅是父类的原型，不再需要调用父类的构造函数，或者说，在构造函数继承中已经调用了父类的构造函数。因此需要的只是父类的原型对象的一个副本，而这个副本通过原型继承即可得到。\n\n但是，直接赋值给子类会出现问题，因为对父类原型对象复制得到的复制对象 p 中的 constructor 指向的不是 subClass 子类对象，因此在寄生式继承中要对复制对象 p 做一次增强，修复其 constructor 属性指向不正确的问题。\n\n最后，将得到的复制对象 p 赋值给子类的原型，这样子类的原型就继承了父类的原型，并且没有执行父类的构造函数。"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 定义父类\nfunction SuperClass(name) {\n  this.name = name;\n  this.colors = ['red', 'blue', 'green'];\n};\n\n// 定义父类原型方法\nSuperClass.prototype.getName = function () {\n  console.log(this.name);\n};\n\n// 定义子类\nfunction SubClass(name, time) {\n  // 构造函数式继承\n  SuperClass.call(this, name);\n  // 子类新增属性\n  this.time = time;\n}\n\n// 寄生式继承父类原型\ninheritPrototype(SubClass, SuperClass);\n// 子类新增原型方法\nSubClass.prototype.getTime = function () {\n  console.log(this.time);\n};"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 创建两个测试方法\nvar instance1 = new SubClass('js book', 2014);\nvar instance2 = new SubClass('css book', 2013);\n\ninstance1.colors.push('black');\n\nconsole.log(instance1.colors);     // [\"red\", \"blue\", \"green\", \"black\"]\nconsole.log(instance2.colors);     // [\"red\", \"blue\", \"green\"]\ninstance2.getName();               // css book\ninstance2.getTime();               // 2013"
    },
    {
      "type": "markdown",
      "data": "这种方式的继承原理如下图，其中最大的改变就是对子类原型的处理，被赋予父类原型的一个引用，这是一个对象，因此这里有一点需要注意的是：子类再想添加原型方法时，必须通过 prototype.[对象] 的形式，由点语法一一添加，否则直接赋予对象就会覆盖掉从父类原型继承而来的对象。"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/89E2B2C8A39F1E6F4BF434C3F7BE4499.png\" alt=\"inherit.png\"><br>"
    }
  ]
}