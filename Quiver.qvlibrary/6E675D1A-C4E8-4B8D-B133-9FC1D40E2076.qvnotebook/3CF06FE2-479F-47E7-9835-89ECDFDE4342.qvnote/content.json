{
  "title": "设直线条的外观",
  "cells": [
    {
      "type": "text",
      "data": "绘图上下文包含一系列可用于更改随后绘制的线条的外观的属性。更改这些属性并不影响之前绘制的线条。而一旦将线条或实心形状绘制好之后，除了擦掉或覆盖之外是没有办法再去修改它们的。"
    },
    {
      "type": "text",
      "data": "用于控制线条样式的最常用属性是颜色和宽度。"
    },
    {
      "type": "markdown",
      "data": "* strokeStyle: 该属性用于指定线条的颜色。该值可以是一个颜色值（CSS 风格的字符串）、一个渐变对象或一个模式对象。线条的颜色默认为黑色（#000）。\n* lineWidth: 该属性用于指定线条在其路径上的宽度。因此当默认值为1时，该线条会在其路径的两侧分别延伸出半个像素。无法将线条绘制在其路径的内部或外部。该属性必须为正值。"
    },
    {
      "type": "text",
      "data": "此外，还有一些控制线条样式的额外属性。"
    },
    {
      "type": "markdown",
      "data": "* lineCap: 线条的终点将如何绘制，它可以是平的、圆形的或者一段延长线。该属性值包含 butt、round 与 square 选项，默认值为 butt。\n* lineJoin: 决定两条相连的线段如何接合，或者连接线的弯头部分如何绘制。该属性值包含 round、bevel 或 miter 选项，默认值为 miter。\n* miterLimit: 当 lineJoin 属性设置为 miter 时，该属性可用于控制两条相交线外侧交点与内侧交点的距离。它必须是一个大于零的有限数，默认值为10."
    },
    {
      "type": "text",
      "data": "使用 context.save() 与 context.restore() 方法可以实现在不同的样式间切换。context.save() 方法将 canvas 的当前状态存入栈中，其中包含各种样式，例如，strokeStyle、fillStyle 以及应用于 canvas 的变换效果。额外的样式变化会影响到后续的绘制指令。调用 context.restore() 可以使得当前的 canvas 状态出栈转而使用下一个状态，也就是之前的状态。"
    }
  ]
}